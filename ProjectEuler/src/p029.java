import java.math.BigInteger;
import java.util.HashSet;

/**
 * This class solve Project Euler Problem 29
 * 
 * Consider all integer combinations of a^b for 2 <= a <= 5 and 2 <= b <= 5:
 *    
 *     22=4, 23=8, 24=16, 25=32
 *     32=9, 33=27, 34=81, 35=243
 *     42=16, 43=64, 44=256, 45=1024
 *     52=25, 53=125, 54=625, 55=3125
 *     
 * If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:
 * 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
 * 
 * How many distinct terms are in the sequence generated by a^b for 2 <= a <= 100 and 2 <= b <= 100?
 * 
 * @author Kamil Adem
 *
 */
public class p029 implements Euler {

	/**
	 * This method computes the number of distinct terms for a^b for 2 <= a <= 100 and 2 <= b <= 100
	 * Iteratively computes all values from 2^2 to 100^100 and puts values into a set. 
	 * Since sets can't contain duplicate values, the size is taken of the set to determine the number of distinct terms
	 * 
	 * @return the number of distinct values from 2^2 to 100^100
	 */
	@Override
	public String run() {
		HashSet<BigInteger> set = new HashSet<BigInteger>();
		for (int a =2; a<=100; a++) {
			for (int b=2; b<=100; b++) {
				set.add(BigInteger.valueOf(a).pow(b));
			}
		}
		return Integer.toString(set.size());
	}

}
