/**
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * 
 * Let us list the factors of the first seven triangle numbers:
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10 
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * 
 * We can see that 28 is the first triangle number to have over five divisors.
 * 
 * What is the value of the first triangle number to have over five hundred divisors?
 * 
 * @author Kamil Adem
 *
 */
public class p012 implements Euler {


	/**
	 * This method Iterates through the triangle number sequences until a value with over 500 divisors appears
	 * To save time, the previous triangle value is saved along with the index value to quickly update the triangle number sequence.
	 * 
	 * @return the triangle number value which has over 500 divisors
	 */
	@Override
	public String run() {
		long i = 1;
		long t = 0;
		long count = 0;
		while(true) {
			t+=i;
			count = numFactors(t);
			if (count>500) {
				break;
			}		
			i++;
		}
		return Long.toString(t);
	}
	
	/**
	 * This method return the number of factors/divisors for a given number n
	 * This method finds all the prime factors of n in the form, n = p^a*q^b..., using recursion
	 * The number of divisors d(n) = (a+1)(b+1)...  
	 * 
	 * @param n the initial number
	 * @return the number of divisors
	 */
	public int numFactors(long n) {
		int m = 1;
		for (int i=2; i<=n; i++) {
			if (n%i == 0) {
				while (n%i == 0)
				{
					m++;
					n = n/i;
				}
				m*=numFactors(n);
				return m;
			}
		}
		return 1;
	}
}
